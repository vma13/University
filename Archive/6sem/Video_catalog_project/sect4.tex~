\section{Реализация}\subsection{Модель}
Для начала определим, какие классы необходимо добавить в систему.  Для хранения информации о наградах добавим новый класс \textbf{Prize}  с атрибутами: имя награды (string), номинация (string), год вручения(integer), страна, где была вручена премия, фильм за участие в котором была получена премия. Однако при этом возникает несколько проблем:

\begin{itemize}
\item Невнимательный пользователь может допустить ошибку при вводе награды или номинации, исправить такую ошибку будет не просто.
\item Поиск по идентификатору происходит намного быстрее, чем поиск на сравнение двух строк.
\item Хранить для каждой награды ее имя и номинацию в виде строки не оптимально, это лишняя нагрузка на БД.
\end{itemize}

Избежать всего этого можно, выделив имя награды и номинацию в отдельные классы. В результате мы получим:

\begin{figure}[h!]
\begin{center}
\includegraphics[scale=0.9]{image/class_my.png}
\end{center}
\caption{Диаграмма классов: индивидуальная часть}
\end{figure}

Из диаграммы видно, что теперь класс \textbf{Prize} содержит только год вручения награды. Он связан отношением многие к одному с классами \textbf{Awards} (награда), \textbf{Nominations} (номинация), \textbf{Films} и \textbf{Persons}. Класс \textbf{Awards} хранит информацию о стране, где была вручена награда и имя награды. Класс \textbf{Nominations} хранит информацию о номинации, в котрой была получена награда. Теперь, после определения с классов и их атрибутов, которые будут в нашей системе, можно переходить к реализации.\\
Так как для каждого класса необходимы модель, контроллер и представления воспользуемся генератором \textit{scaffold}, и сгенерируем все части с его помощью.
\verbatiminput{code/sc.txt}
Внесем изменения в модель \textbf{Awards:}
\verbatiminput{code/award_modt.txt}
Здесь указана связь один ко многим с классом \textbf{Country} (belongs\_to \:country) и многие к одному с классом \textbf{Prizes} (has\_many \:prizes). Также добавлены ограничения: имя и страна должны всегда присутствовать, а имя награды должно быть уникальным (т. е нельзя будет создать две награды с одинаковыми именами), это позволит избежать ошибок при добавлении пользователем награды.  Для удобного просмотра списка наград сделаем постраничную навигацию с помощью плагина Paginate.  Для этого в модели укажем параметр paginates\_per равным 30, в результате на одной странице будет отображаться не более 30 наград.\\
Аналогичные изменения были внесены в модель \textbf{Nominztions}.\\
Наконец добавим изменения в главную модель: \textbf{Prizes}.\\
\verbatiminput{code/prize_mod.txt}
Вначале указаны связи с классами \textbf{Awards}, \textbf{Nominations}, \textbf{Poeple} и \textbf{Films}.
Также добавлены несколько проверок на корректность вводимых пользователем данных: год может принимать только целочисленные значение и не может быть меньше чем 1990;  фильм, награда, персона и номинация не могут быть пустыми.  Далее определены несколько методов, которые в дальнейшем понадобятся в представлении для \textit{JavaScript}. Также необходимо сделать их доступными извне.\\

В моделях классов \textbf{Poeple} и \textbf{Films} также необходимо указать связи с классом \textbf{Prizes}.

\verbatiminput{code/p_f_mod.txt}

\subsection{Контроллер и Представление}
Теперь, после внесения всех необходимых изменений в модели, можно переходить к контроллерам. Контроллер интерпретирует данные, введённые пользователем, и информирует модель и представление о необходимости соответствующей реакции.\\
\hspace*{0.25cm}Для того чтобы пользователь мог добавлять награды и премии, не нужно создавать отдельный интерфейс, необходимо сделать это при редактировании персоны.  Также надо добавить в стандартную форму для редактирования персоны форму для создания новой награды. Здесь понадобятся методы, которые ранее определены в модели \textbf{Prize}. Ввод фильма, награды и номинации можно сделать с помощью плагина \textit{Tokeninput}. \textit{Tokeninput} является \textit{JQuery} плагином, который позволяет пользователям выбирать несколько элементов из заданного списка, используя автозавершение при поиске по каждому пункту.\\
Рассмотрим, как это будет выглядеть для класса \textbf{Award}.Так как в классы \textbf{Nominations} и \textbf{Films} необходимо внести аналогичные изменения, они не будут рассматриваться.

\verbatiminput{code/form.txt}

Необходимо добавить небольшой скрипт, который будет посылать запрос в фоновом режиме к контролеру и ожидать результатов поиска.  При этом контролер может извлекать данные из любого места, как, например, базы данных или жесткого диска. Но результаты поиска должны возвращаться  в формате \textit{JSON}.

\verbatiminput{code/js.txt}

Нужно реализовать, чтобы контроллер возвращал данные в формате \textit{JSON}, на полученный им запрос. Сделать это очень просто.

\verbatiminput{code/award_index.txt}

Также необходимо добавить создание и сохранение новой награды в метод \textit{update} в контроллере персоны, создание новой награды и ее сохранение.

\verbatiminput{code/update.txt} 

Вначале находится персона, у которой \textit{id} равен \textit{params[:id]}, этот параметр передается от формы при ее редактировании. После этого создаётся новая награда и сохраняется. Если пользователь не ввел никакой информации, то награда не сохраняется, в противном случае - сохраняется. Если не удалось (а это возможно только в одном случае -- данные, введенные пользователем,  не прошли проверку), делается возврат в форму, и отображается сообщение об ошибке пользователю.\\
\hspace*{0.5cm}Для того чтобы сделать возможным просмотр всех наград у персоны, нужно внести изменения в представление персоны, а именно в метод 
\textit{show}.
\verbatiminput{code/show_person.txt}
Внесем изменения в метод \textit{show} в контролере класса Persons. У персоны может быть большое число наград и динамически загражать их неоптимально и долго. Чтобы избежать этого нужно автоматически подгружать вне награды, номинации и фильмы при загрузке персоны. В результате количество запросов к базе данных уменьшится до одного. Для этого предусмотренна команда includes.

\verbatiminput{code/person_controller.txt}

Аналогичным образом сделаем просмотр наград у фильма.
\verbatiminput{code/film_prize.txt}

\endinput

