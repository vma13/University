\section{Пример реализации одного из классов}

\subsection{Использование генератора scaffold}
\hspace*{0.25см}Теперь, после определения классов и их атрибутов, которые будут в нашей системе, можно переходить к реализации.\\
Так как для каждого класса необходимы модель, контроллер и представления воспользуемся генератором \textit{scaffold}, и сгенерируем все части с его помощью.\\
\verbatiminput{code/sc.txt}
Для корректной работы системы необходимо правильно выстроить отношения. Возьмем к примеру классы "Дисциплина" и класс "Курс". Для того чтобы связать эти классы отношением один ко многим, внесем изменения в модели \textbf{Discipline} и \textbf{Cource}\\
\verbatiminput{code/discipline.txt}
\verbatiminput{code/course.txt}
Cвязь один ко многим с классом \textbf{Course} (belongs\_to \:discipline). Также добавлены ограничения: Дата начала и конца дисциплины, а также идентификатор должны быть не пустыми.\\
В модель \textbf{Course} вводим метод attr\_reader, передаем переменную \:discipline\_token, он делает эту переменную доступной вне этого класса. И метод \textbf{discipline\_token}, для того чтобы можно было использовать jquery плагин под названием token\_input, который позволяет выбирать множество пунктов из предопределенного листа, используя автоподстановку для поиска каждого из элементов.\\

\subsection{Контроллер и Представление}
Теперь, после внесения всех необходимых изменений в модели, можно переходить к контроллерам. Контроллер интерпретирует данные, введённые пользователем, и информирует модель и представление о необходимости соответствующей реакции.\\
\hspace*{0.25cm}Для того чтобы пользователь мог добавлять курсы, нужно создавать отдельный интерфейс. Для этого просто добавим ссылку на страничку создания курса.\\
Рассмотрим, как это будет выглядеть для класса \textbf{Course}.
\verbatiminput{code/form.txt}
Необходимо добавить небольшой скрипт, который будет посылать запрос в фоновом режиме к контролеру и ожидать результатов поиска. При этом контролер может извлекать данные из любого места, как, например, базы данных или жесткого диска. Но результаты поиска должны возвращаться  в формате \textit{JSON}.
\verbatiminput{code/js.txt}
Также необходимо добавить создание, отображение, редактирование, удаление, изменение и сохранение нового курса в контроллере курса.\\
\verbatiminput{code/update.txt} 
Если пользователь, при создании нового курса, не ввел никакой информации, то он не сохранится. Если не удалось сохранить курс (а это возможно только в одном случае -- данные, введенные пользователем,  не прошли проверку), делается возврат в форму, и отображается сообщение об ошибке пользователю.\\
Для отображения уже созданных курсов необходимо внести изменения в представления \textbf{Index} и \textbf{Show}
\verbatiminput{code/show.txt}
\textit{Представление Show}
\verbatiminput{code/index.txt}
\textit{Представление Index}\\
\vspace*{0.75см}Аналогичным образом реализуются остальные классы.\\
\endinput

