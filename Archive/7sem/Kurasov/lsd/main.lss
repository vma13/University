
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000246  000002ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000246  00000000  00000000  00000074  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000378  00000000  00000000  000002cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000054  00000000  00000000  00000644  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000014  00000000  00000000  00000698  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000f6  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005ce  00000000  00000000  000007a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001b0  00000000  00000000  00000d70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ca  00000000  00000000  00000f20  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  000011ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000017e  00000000  00000000  000012ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000da  00000000  00000000  00001438  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e4       	ldi	r30, 0x46	; 70
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 31       	cpi	r26, 0x10	; 16
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ff 00 	call	0x1fe	; 0x1fe <main>
  9e:	0c 94 22 01 	jmp	0x244	; 0x244 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

000000a6 <cbi>:
#define RS 0
#define E 1


void cbi(unsigned char bit) {
  a6:	95 b1       	in	r25, 0x05	; 5
  a8:	21 e0       	ldi	r18, 0x01	; 1
  aa:	30 e0       	ldi	r19, 0x00	; 0
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <cbi+0xc>
  ae:	22 0f       	add	r18, r18
  b0:	33 1f       	adc	r19, r19
  b2:	8a 95       	dec	r24
  b4:	e2 f7       	brpl	.-8      	; 0xae <cbi+0x8>
  b6:	20 95       	com	r18
  b8:	92 23       	and	r25, r18
  ba:	95 b9       	out	0x05, r25	; 5
  bc:	08 95       	ret

000000be <sbi>:
  PORTB &= ~(1 << bit);
}

void sbi(unsigned char bit) {
  be:	95 b1       	in	r25, 0x05	; 5
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	02 c0       	rjmp	.+4      	; 0xca <sbi+0xc>
  c6:	22 0f       	add	r18, r18
  c8:	33 1f       	adc	r19, r19
  ca:	8a 95       	dec	r24
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <sbi+0x8>
  ce:	92 2b       	or	r25, r18
  d0:	95 b9       	out	0x05, r25	; 5
  d2:	08 95       	ret

000000d4 <lcdcmd>:
  PORTB |= (1 << bit);
}

void lcdcmd(unsigned char cmd) {
  d4:	0f 93       	push	r16
  d6:	1f 93       	push	r17
  d8:	08 2f       	mov	r16, r24
  cbi(RS);
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	0e 94 53 00 	call	0xa6	; 0xa6 <cbi>
  PORTD = cmd & 0xF0;
  e0:	80 2f       	mov	r24, r16
  e2:	80 7f       	andi	r24, 0xF0	; 240
  e4:	8b b9       	out	0x0b, r24	; 11
  e6:	29 9a       	sbi	0x05, 1	; 5
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  e8:	1a e0       	ldi	r17, 0x0A	; 10
  ea:	81 2f       	mov	r24, r17
  ec:	8a 95       	dec	r24
  ee:	f1 f7       	brne	.-4      	; 0xec <lcdcmd+0x18>
  cbi(RS);
  PORTD = cmd & 0xF0;
  sbi(E);
  _delay_us(2);
  cbi(E);
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	0e 94 53 00 	call	0xa6	; 0xa6 <cbi>
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  f6:	81 2f       	mov	r24, r17
  f8:	8a 95       	dec	r24
  fa:	f1 f7       	brne	.-4      	; 0xf8 <lcdcmd+0x24>
  PORTB &= ~(1 << bit);
}

void sbi(unsigned char bit) {
  PORTB |= (1 << bit);
  fc:	29 9a       	sbi	0x05, 1	; 5
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  fe:	1a 95       	dec	r17
 100:	f1 f7       	brne	.-4      	; 0xfe <lcdcmd+0x2a>
  cbi(E);
  _delay_us(2);
  sbi(E);
  _delay_us(2);
  PORTD = cmd << 4;
 102:	02 95       	swap	r16
 104:	00 7f       	andi	r16, 0xF0	; 240
 106:	0b b9       	out	0x0b, r16	; 11
  cbi(E);
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	0e 94 53 00 	call	0xa6	; 0xa6 <cbi>
  PORTD = 0xFF;
 10e:	8f ef       	ldi	r24, 0xFF	; 255
 110:	8b b9       	out	0x0b, r24	; 11
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 112:	80 ee       	ldi	r24, 0xE0	; 224
 114:	9e e2       	ldi	r25, 0x2E	; 46
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <lcdcmd+0x42>
 11a:	1f 91       	pop	r17
 11c:	0f 91       	pop	r16
 11e:	08 95       	ret

00000120 <lcddata>:
  PORTD = 0xFF;
  _delay_ms(3);
}

void lcddata(unsigned char data) {
 120:	0f 93       	push	r16
 122:	1f 93       	push	r17
 124:	08 2f       	mov	r16, r24
 126:	28 9a       	sbi	0x05, 0	; 5
  sbi(RS);
  PORTD = data & 0xF0;
 128:	80 7f       	andi	r24, 0xF0	; 240
 12a:	8b b9       	out	0x0b, r24	; 11
 12c:	29 9a       	sbi	0x05, 1	; 5
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 12e:	1a e0       	ldi	r17, 0x0A	; 10
 130:	81 2f       	mov	r24, r17
 132:	8a 95       	dec	r24
 134:	f1 f7       	brne	.-4      	; 0x132 <lcddata+0x12>
  sbi(RS);
  PORTD = data & 0xF0;
  sbi(E);
  _delay_us(2);
  cbi(E);
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	0e 94 53 00 	call	0xa6	; 0xa6 <cbi>
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 13c:	81 2f       	mov	r24, r17
 13e:	8a 95       	dec	r24
 140:	f1 f7       	brne	.-4      	; 0x13e <lcddata+0x1e>
  PORTB &= ~(1 << bit);
}

void sbi(unsigned char bit) {
  PORTB |= (1 << bit);
 142:	29 9a       	sbi	0x05, 1	; 5
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 144:	1a 95       	dec	r17
 146:	f1 f7       	brne	.-4      	; 0x144 <lcddata+0x24>
  cbi(E);
  _delay_us(2);
  sbi(E);
  _delay_us(2);
  PORTD = data << 4;
 148:	02 95       	swap	r16
 14a:	00 7f       	andi	r16, 0xF0	; 240
 14c:	0b b9       	out	0x0b, r16	; 11
  cbi(E);
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	0e 94 53 00 	call	0xa6	; 0xa6 <cbi>
  cbi(RS);
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	0e 94 53 00 	call	0xa6	; 0xa6 <cbi>
  PORTD = 0xFF;
 15a:	8f ef       	ldi	r24, 0xFF	; 255
 15c:	8b b9       	out	0x0b, r24	; 11
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 15e:	80 ea       	ldi	r24, 0xA0	; 160
 160:	9f e0       	ldi	r25, 0x0F	; 15
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <lcddata+0x42>
 166:	1f 91       	pop	r17
 168:	0f 91       	pop	r16
 16a:	08 95       	ret

0000016c <lcdclear>:
  PORTD = 0xFF;
  _delay_ms(1);
}

void lcdclear(void) {
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	0e 94 6a 00 	call	0xd4	; 0xd4 <lcdcmd>
 172:	08 95       	ret

00000174 <lcdentrymode>:
  lcdcmd(0x01);
}

void lcdentrymode(unsigned char cmd) {
 174:	0e 94 6a 00 	call	0xd4	; 0xd4 <lcdcmd>
 178:	08 95       	ret

0000017a <lcddisplayon>:
  lcdcmd(cmd);
}

void lcddisplayon(void) {
 17a:	8c e0       	ldi	r24, 0x0C	; 12
 17c:	0e 94 6a 00 	call	0xd4	; 0xd4 <lcdcmd>
 180:	08 95       	ret

00000182 <lcddisplayoff>:
  lcdcmd(0x0C);
}

void lcddisplayoff(void) {
 182:	88 e0       	ldi	r24, 0x08	; 8
 184:	0e 94 6a 00 	call	0xd4	; 0xd4 <lcdcmd>
 188:	08 95       	ret

0000018a <lcdhome>:
  lcdcmd(0x08);
}

void lcdhome(void){
 18a:	82 e0       	ldi	r24, 0x02	; 2
 18c:	0e 94 6a 00 	call	0xd4	; 0xd4 <lcdcmd>
 190:	08 95       	ret

00000192 <lcdsecondline>:
  lcdcmd(0x02);
}
void lcdsecondline(void){
 192:	8d eb       	ldi	r24, 0xBD	; 189
 194:	0e 94 6a 00 	call	0xd4	; 0xd4 <lcdcmd>
 198:	08 95       	ret

0000019a <lcdshiftleft>:
  lcdcmd(0xBD);
}

void lcdshiftleft(void){
 19a:	80 e1       	ldi	r24, 0x10	; 16
 19c:	0e 94 6a 00 	call	0xd4	; 0xd4 <lcdcmd>
 1a0:	08 95       	ret

000001a2 <lcdshiftright>:
  lcdcmd(0x10);
}

void lcdshiftright(void){
 1a2:	84 e1       	ldi	r24, 0x14	; 20
 1a4:	0e 94 6a 00 	call	0xd4	; 0xd4 <lcdcmd>
 1a8:	08 95       	ret

000001aa <lcdinit>:
  lcdcmd(0x14);
}

void lcdinit(void) {
 1aa:	8f ef       	ldi	r24, 0xFF	; 255
 1ac:	85 b9       	out	0x05, r24	; 5
  PORTB = 0xFF;
  DDRB = 0xFF;
 1ae:	84 b9       	out	0x04, r24	; 4
  PORTD = 0xF0;
 1b0:	80 ef       	ldi	r24, 0xF0	; 240
 1b2:	8b b9       	out	0x0b, r24	; 11
  DDRD = 0xF0;
 1b4:	8a b9       	out	0x0a, r24	; 10
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <lcdinit+0x10>
  DDRD = 0xF0;
  
  _delay_ms(60);
  
  lcdcmd(0x20);
 1be:	80 e2       	ldi	r24, 0x20	; 32
 1c0:	0e 94 6a 00 	call	0xd4	; 0xd4 <lcdcmd>
  lcdcmd(0x28);
 1c4:	88 e2       	ldi	r24, 0x28	; 40
 1c6:	0e 94 6a 00 	call	0xd4	; 0xd4 <lcdcmd>

  lcddisplayoff();
 1ca:	0e 94 c1 00 	call	0x182	; 0x182 <lcddisplayoff>

  lcddisplayon();
 1ce:	0e 94 bd 00 	call	0x17a	; 0x17a <lcddisplayon>

  lcdclear();
 1d2:	0e 94 b6 00 	call	0x16c	; 0x16c <lcdclear>
  
  lcdentrymode(0x06);
 1d6:	86 e0       	ldi	r24, 0x06	; 6
 1d8:	0e 94 ba 00 	call	0x174	; 0x174 <lcdentrymode>
 1dc:	08 95       	ret

000001de <lcdprints>:
  
}

void lcdprints(char *s){
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
 1e2:	ec 01       	movw	r28, r24
 1e4:	03 c0       	rjmp	.+6      	; 0x1ec <lcdprints+0xe>
  while(*s) {
    lcddata(*s);
 1e6:	0e 94 90 00 	call	0x120	; 0x120 <lcddata>
    s++;
 1ea:	21 96       	adiw	r28, 0x01	; 1
 1ec:	88 81       	ld	r24, Y
 1ee:	88 23       	and	r24, r24
 1f0:	d1 f7       	brne	.-12     	; 0x1e6 <lcdprints+0x8>
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	08 95       	ret

000001f8 <lcdprintc>:
  }
}

void lcdprintc(unsigned char c) {
 1f8:	0e 94 90 00 	call	0x120	; 0x120 <lcddata>
 1fc:	08 95       	ret

000001fe <main>:
#include "lcd.h"

char line1[16] = "Hello World!    ";

int main(void) {
 1fe:	cf ef       	ldi	r28, 0xFF	; 255
 200:	d4 e0       	ldi	r29, 0x04	; 4
 202:	de bf       	out	0x3e, r29	; 62
 204:	cd bf       	out	0x3d, r28	; 61
  unsigned int i, j;
  lcdinit();
 206:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcdinit>
 20a:	c0 e0       	ldi	r28, 0x00	; 0
 20c:	d1 e0       	ldi	r29, 0x01	; 1
	
  while(1){
		for(i = 0; i < 16; i++) {
	  lcdprintc(line1[i]);
 20e:	88 81       	ld	r24, Y
 210:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcdprintc>
 214:	20 e0       	ldi	r18, 0x00	; 0
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	e0 e0       	ldi	r30, 0x00	; 0
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 21c:	cf 01       	movw	r24, r30
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <main+0x20>
	  for(j = 0; j < 50; j++)
 222:	2f 5f       	subi	r18, 0xFF	; 255
 224:	3f 4f       	sbci	r19, 0xFF	; 255
 226:	22 33       	cpi	r18, 0x32	; 50
 228:	31 05       	cpc	r19, r1
 22a:	c1 f7       	brne	.-16     	; 0x21c <main+0x1e>
 22c:	21 96       	adiw	r28, 0x01	; 1
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	c0 31       	cpi	r28, 0x10	; 16
 232:	d8 07       	cpc	r29, r24
 234:	61 f7       	brne	.-40     	; 0x20e <main+0x10>
	    _delay_ms(30);
	  
    }
		lcdclear();
 236:	0e 94 b6 00 	call	0x16c	; 0x16c <lcdclear>
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 23a:	80 e2       	ldi	r24, 0x20	; 32
 23c:	9e e4       	ldi	r25, 0x4E	; 78
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <main+0x40>
 242:	e3 cf       	rjmp	.-58     	; 0x20a <main+0xc>

00000244 <_exit>:
 244:	ff cf       	rjmp	.-2      	; 0x244 <_exit>
