\section{Неэффективность алгоритма}
Задача решена, но как оказалось, рассмотренный алгоритм не совсем эффективный. Рассмотрим его недостатки. В этом алгоритме сравнивается положение
шайбы по принципу <<верх-низ>>. Если запустить такой алгоритм и немного поиграться, то всё станет ясно. Рассмотрим случай когда выполняется условие
$p.getBounds().y < pos.y $, но шайба касается сбоку кирпича, следовательно, кирпич не должен разбиваться.

\begin{center}
\includegraphics[scale=0.4]{images/bug.png}
\end{center}

Как видно из этого рисунка, шайба врезается в кирпич сбоку и при этом её верхняя точка находится выше кирпича. Кирпич в такой ситуации не должен разбиваться. Таким образом, рассмотренный выше алгоритм не эффективен.

\vspace{0.1cm}

\section{Второй способ}
Рассмотрим более эффективный алгоритм. Первый не работает только когда шайба врезается в кирпич сбоку. Значит надо контролировать положение шайбы не только
относительно верхней стенки, но и относительно боковых сторон кирпича. Точка касания кирпича шайбой находится примерно внизу шайбы по центру:

\begin{center}
\includegraphics[scale=0.4]{images/idea2.png}
\end{center}

Если при столкновении шайба находится слева от кирпича и координаты этой точки относительно оси x меньше координаты точки верхней стенки кирпича, то кирпич убивается. Аналогично для правой стороны.
Изменим уже имеющийся класс $ArmorBrick$. Чтобы исходный код казался наиболее читабельным, создадим переменные, которые будут определять стороны шайбы и кирпича.


{
\small
\verbatiminput{programms/armorBrick_alg2.java}
}
