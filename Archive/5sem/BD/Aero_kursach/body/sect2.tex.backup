\section{Идея решения}
Рассмотрим простой алгоритм решения данной задачи.
 Чтобы новый кирпич мог разбиваться только сверху,
 нужно определить с какой стороны при столкновении к
нему подлетела шайба. Для этого достаточно сравнить
координаты шайбы и кирпича относительно оси y. Если
при столкновении шайбы и кирпича координаты шайбы
относительно y по величине меньше чем координаты по
y кирпича, значит шайба врезается в кирпич сверху.

\begin{center}
\includegraphics[scale=0.7]{images/idea.png}
\end{center}

Для начала рассмотрим реализацию класса Brick из эталонного проекта:

{
\small
\verbatiminput{programms/Brick.java}
}


Здесь есть метод hitBy , который срабатывает при столкновении шайбы (Puck) и кирпича (Brick). Итак, для того чтобы определять с какой стороны шайба столкнулась с кирпичом, потребуется определять их координаты на игровом поле (PlayField). Рассмотрим иерархию класса Sprite эталонного проекта:

\begin{center}
\includegraphics[scale=0.66]{images/project_tree.png}
\end{center}

Класс Brick является производным от класса StationarySprite (неподвижный спрайт), который в свою очередь производится от класса Sprite (спрайт).
У класса Sprite определен абстрактный обьект Rectangle (прямоугольник). Нужно понять для чего он нужен. Рассмотрим конструкторы классов BrickPile (склад кирпичей) и Puck (шайба):


{
\small
\verbatiminput{programms/brick_pile.java}
}


{
\small
\verbatiminput{programms/puck.java}
}

Посмотрим на строки:


{
\small
\verbatiminput{programms/brick_rect.java}
}

{
\small
\verbatiminput{programms/puck_rect.java}
}


В них создается обьект Rectangle, которому на вход подаются параметры: x, y (координаты на поле); width, height (длина и ширина прямоугольника). Аргументы
img.getWidth(pf) и img.getHeight(pf) определяют размеры изображения шайбы на игровом поле. Таким образом обьект Rectangle нужен для того, чтобы определять местоположение обьектов на игровом поле.
